import "tfplan-functions" as plan

allowed_service_types = [
	"NodePort",
	"ClusterIP",
]


// kubernetes_services function returns a list of 'kubernetes_service' resources
kubernetes_services = plan.find_resources("kubernetes_service")


/* kubernetes_services = func() {
	services = []
	// Iterate over all the resources in the Terraform plan and
	// find “kubernetes_service” resource
	for plan.resources as type, resource {
		if type is "kubernetes_service" {
			services += [resource]
		}
	}

	return services // Return a list of kubernetes services found in the Terraform plan
} */

violatingServiceCount = 0


	for kubernetes_services as address,svc {
		
		# Find the ingress rules of the current SG
		specs = plan.find_blocks(svc, "spec")
		violatingService = plan.filter_attribute_not_in_list(specs,
							"type", allowed_service_types, false)

		# Print violation messages
		if length(violatingService["messages"]) > 0{
			violatingServiceCount += 1
			plan.print_violations(violatingService["messages"], "  Spec "+address)

		}	
	}
validated = violatingServiceCount is 0
main = rule {

	validated is true
}